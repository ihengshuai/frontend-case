var S=(I,a,e)=>new Promise((l,f)=>{var m=o=>{try{i(e.next(o))}catch(R){f(R)}},r=o=>{try{i(e.throw(o))}catch(R){f(R)}},i=o=>o.done?l(o.value):Promise.resolve(o.value).then(m,r);i((e=e.apply(I,a)).next())});(function(){"use strict";const a="https://unpkg.com/@ffmpeg/core@0.12.6/dist/umd/ffmpeg-core.js";var e;(function(t){t.LOAD="LOAD",t.EXEC="EXEC",t.WRITE_FILE="WRITE_FILE",t.READ_FILE="READ_FILE",t.DELETE_FILE="DELETE_FILE",t.RENAME="RENAME",t.CREATE_DIR="CREATE_DIR",t.LIST_DIR="LIST_DIR",t.DELETE_DIR="DELETE_DIR",t.ERROR="ERROR",t.DOWNLOAD="DOWNLOAD",t.PROGRESS="PROGRESS",t.LOG="LOG",t.MOUNT="MOUNT",t.UNMOUNT="UNMOUNT"})(e||(e={}));const l=new Error("unknown message type"),f=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),m=new Error("failed to import ffmpeg-core.js");let r;const i=u=>S(this,[u],function*({coreURL:t,wasmURL:n,workerURL:s}){const c=!r;try{t||(t=a),importScripts(t)}catch(O){if(t||(t=a.replace("/umd/","/esm/")),self.createFFmpegCore=(yield import(t)).default,!self.createFFmpegCore)throw m}const E=t,D=n||t.replace(/.js$/g,".wasm"),C=s||t.replace(/.js$/g,".worker.js");return r=yield self.createFFmpegCore({mainScriptUrlOrBlob:`${E}#${btoa(JSON.stringify({wasmURL:D,workerURL:C}))}`}),r.setLogger(O=>self.postMessage({type:e.LOG,data:O})),r.setProgress(O=>self.postMessage({type:e.PROGRESS,data:O})),c}),o=({args:t,timeout:n=-1})=>{r.setTimeout(n),r.exec(...t);const s=r.ret;return r.reset(),s},R=({path:t,data:n})=>(r.FS.writeFile(t,n),!0),L=({path:t,encoding:n})=>r.FS.readFile(t,{encoding:n}),N=({path:t})=>(r.FS.unlink(t),!0),A=({oldPath:t,newPath:n})=>(r.FS.rename(t,n),!0),w=({path:t})=>(r.FS.mkdir(t),!0),k=({path:t})=>{const n=r.FS.readdir(t),s=[];for(const u of n){const c=r.FS.stat(`${t}/${u}`),E=r.FS.isDir(c.mode);s.push({name:u,isDir:E})}return s},b=({path:t})=>(r.FS.rmdir(t),!0),d=({fsType:t,options:n,mountPoint:s})=>{const u=t,c=r.FS.filesystems[u];return c?(r.FS.mount(c,n,s),!0):!1},p=({mountPoint:t})=>(r.FS.unmount(t),!0);self.onmessage=u=>S(this,[u],function*({data:{id:t,type:n,data:s}}){const c=[];let E;try{if(n!==e.LOAD&&!r)throw f;switch(n){case e.LOAD:E=yield i(s);break;case e.EXEC:E=o(s);break;case e.WRITE_FILE:E=R(s);break;case e.READ_FILE:E=L(s);break;case e.DELETE_FILE:E=N(s);break;case e.RENAME:E=A(s);break;case e.CREATE_DIR:E=w(s);break;case e.LIST_DIR:E=k(s);break;case e.DELETE_DIR:E=b(s);break;case e.MOUNT:E=d(s);break;case e.UNMOUNT:E=p(s);break;default:throw l}}catch(D){self.postMessage({id:t,type:e.ERROR,data:D.toString()});return}E instanceof Uint8Array&&c.push(E.buffer),self.postMessage({id:t,type:n,data:E},c)})})();
